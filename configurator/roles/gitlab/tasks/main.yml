---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"
  tags:
    - prebake

- name: Check if GitLab configuration file already exists.
  stat: path=/etc/gitlab/gitlab.rb
  register: gitlab_config_file
  tags:
    - prebake

- name: Check if GitLab deb files already cached
  shell: ls -1 "{{ gitlab_cache_local_dir }}"
  become: false
  changed_when: false
  delegate_to: 127.0.0.1
  register: cached_deb_files
  tags:
    - prebake

- name: Copy GitLab deb files to host
  copy:
    src: "{{ gitlab_cache_local_dir }}/{{ item }}"
    dest: "{{ gitlab_cache_remote_dir }}/{{item}}"
  with_items: "{{ cached_deb_files.stdout_lines }}"
  tags:
    - prebake

- name: Check if GitLab is already installed.
  stat: path=/usr/bin/gitlab-ctl
  register: gitlab_file
  tags:
    - prebake

- name: Update apt repository
  package:
    update_cache: true
    cache_valid_time: 604800
  tags:
    - prebake

# Install GitLab and its dependencies.
- name: Install GitLab dependencies.
  package:
    name: "{{ gitlab_dependencies }}"
    state: present
  tags:
    - prebake

- name: Install GitLab dependencies (Debian).
  apt:
    name: gnupg2
    state: present
  when: ansible_os_family == 'Debian'
  tags:
    - prebake

- name: Download GitLab repository installation script.
  get_url:
    url: "{{ gitlab_repository_installation_script_url }}"
    dest: /tmp/gitlab_install_repository.sh
    validate_certs: "{{ gitlab_download_validate_certs }}"
  when: not gitlab_file.stat.exists
  tags:
    - prebake

- name: Install GitLab repository.
  command: bash /tmp/gitlab_install_repository.sh
  register: output
  when: not gitlab_file.stat.exists
  tags:
    - prebake

- name: Define the Gitlab package name.
  set_fact:
    gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
  when: gitlab_version | default(false)
  tags:
    - prebake

- name: Download the GitLab package
  command:
    cmd: /usr/bin/apt-get install --download-only {{ gitlab_package_name | default(gitlab_edition) }}
    warn: false
  args:
    creates: /var/cache/apt/archives/gitlab*.deb
  tags:
    - prebake

- name: Install GitLab
  package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  async: 300
  poll: 5
  when: not gitlab_file.stat.exists

# Start and configure GitLab. Sometimes the first run fails, but after that,
# restarts fix problems, so ignore failures on this run.
- name: Reconfigure GitLab (first run).
  command: >
    gitlab-ctl reconfigure
    creates=/var/opt/gitlab/bootstrapped
  failed_when: false

- name: Create GitLab SSL configuration folder.
  file:
    path: /etc/gitlab/ssl
    state: directory
    owner: root
    group: root
    mode: 0700
  when: gitlab_create_self_signed_cert | bool

- name: Create self-signed certificate.
  command: >
    openssl req -new -nodes -x509 -subj "{{ gitlab_self_signed_cert_subj }}"
    -days 3650 -keyout {{ gitlab_ssl_certificate_key }} -out {{ gitlab_ssl_certificate }} -extensions v3_ca
    creates={{ gitlab_ssl_certificate }}
  when: gitlab_create_self_signed_cert | bool

- name: Copy GitLab configuration file.
  template:
    src: "{{ gitlab_config_template }}"
    dest: /etc/gitlab/gitlab.rb
    owner: root
    group: root
    mode: 0600
  notify: restart gitlab

- name: Get list of debs to cache locally
  shell: ls -1 {{ gitlab_cache_remote_dir }}/*.deb
  register: deb_files
  changed_when: false

- name: Cache GitLab deb files locally
  become: false  # Avoid MemoryError problems https://docs.ansible.com/ansible/latest/modules/fetch_module.html
  fetch:
    src: "{{ item }}"
    dest: "{{ gitlab_cache_local_dir }}/"
    flat: true
  with_items: "{{ deb_files.stdout_lines }}"
