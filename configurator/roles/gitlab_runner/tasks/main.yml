---
# TODO: Configure the runner to run inside a docker container with access
#       to the Docker socket in the host so that we can build Docker containers
#       without resorting to the really ugly Docker-in-Docker magic.
#       See:
#         1. https://docs.gitlab.com/runner/install/docker.html
#         2. http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/#:~:text=The%20primary%20purpose%20of%20Docker,into%20your%20Jenkins%20container%20instead.
- name: Check if GitLab Runner is already running
  systemd:
    name: gitlab-runner
    state: started
    enabled: true
  register: check_gitlab_runner
  ignore_errors: true

- name: Get GitLab Runner version
  when: check_gitlab_runner is success
  block:
  - name: Get currently installed GitLab Runner's version
    shell: gitlab-runner | grep -A 1 'VERSION:' | tr -d '\n' | awk '{print $2}'
    changed_when: false
    register: get_gitlab_runner_version

  - name: Set installed_gitlab_runner fact
    set_fact:
      installed_gitlab_runner_version: "{{ get_gitlab_runner_version.stdout }}"

- name: Install GitLab Runner v{{ gitlab_runner_version }}
  when: check_gitlab_runner is failed or
        installed_gitlab_runner_version != gitlab_runner_version
  apt:
    deb: https://gitlab-runner-downloads.s3.amazonaws.com/v{{ gitlab_runner_version }}/deb/gitlab-runner_amd64.deb
    state: present

- name: Add user gitlab-runner to docker group
  user:
    name: gitlab-runner
    append: yes
    groups: docker

# https://docs.gitlab.com/runner/faq/README.html#job-failed-system-failure-preparing-environment
- name: Ensure /home/gitlab-runner/.bash_logout does not exist
  file:
    path: /home/gitlab-runner/.bash_logout
    state: absent

# TODO: Make this configurable via the vars.yml file or the inventory
# Reference: https://docs.gitlab.com/runner/executors/
- name: Set facts for use by this host's GitLab Runner
  set_fact:
    desired_runner:
      description: "docker-executor"
      executor: docker
      docker_image: ubuntu:bionic

- name: Get the runner in {{ ansible_hostname }}
  shell: gitlab-runner list 2>&1 | awk 'NR>2{ print $1 }'
  changed_when: false
  register: get_current_runners

- name: Set current_runners fact
  set_fact:
    current_runners: "{{ get_current_runners.stdout_lines }}"

- name: Unregistered undeclared runners
  command: gitlab-runner unregister -n {{ item }}
  when: item != desired_runner.description
  with_items: "{{ current_runners }}"

# Adapted from https://stackoverflow.com/a/57547905/402145
# - when: not desired_executor_names is subset(registered_executor_names)
- when: desired_runner.description not in current_runners
  block:
  - name: Get registration token
    when: groups['gitlab_hosts'] | length > 0
    delegate_to: "{{ groups['gitlab_hosts'][0] }}"
    become: true
    command: 'gitlab-rails runner -e production "puts Gitlab::CurrentSettings.current_application_settings.runners_registration_token"'
    changed_when: false
    register: get_registration_token

  - name: Set registration_token fact
    set_fact:
      registration_token: '{{ get_registration_token.stdout }}'

  - name: Register {{ desired_runner.description }}
    # TODO: Make this flexible enough to convert all of the keys in {{ desired_runner }}
    #       into arguments for the `gitlab-runner register` command below.
    command: >-
      gitlab-runner register
        --non-interactive
        --url='{{ gitlab_external_url }}'
        --registration-token='{{ registration_token }}'
        --description='{{ desired_runner.description }}'
        --executor='{{ desired_runner.executor }}'
        --docker-image='{{ desired_runner.docker_image }}'
        --locked=false
