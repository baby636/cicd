---
- name: Check if namespace '{{ desired_project.namespace }}' exists
  uri:
    url: "{{ api_base_url }}/namespaces?search={{ desired_project.namespace }}"
    headers:
      "{{ common_admin_headers }}"
    status_code: [200]
  register: check_namespace

- name: Set namespace_matches fact
  set_fact:
    namespace_matches: "{{ check_namespace.json }}"

- when: namespace_matches | length == 0
  block:
  - name: Create group '{{ desired_project.namespace }}'
    uri:
      url: "{{ api_base_url }}/groups"
      method: POST
      headers:
        "{{ common_admin_headers }}"
      body: >-
        name={{ desired_project.namespace }}&
        path={{ desired_project.namespace }}&
        visibility={{ group_defaults.visibility }}
      status_code: [200, 201]
    register: create_group

  - name: Set namespace fact to newly created group '{{ desired_project.namespace }}'
    set_fact:
      namespace: "{{ create_group.json }}"

- when: namespace_matches | length > 1
  block:
  - debug:
      msg: Multiple matches for namespace '{{ desired_project.namespace }}' found

  - name: Fail if no exact match for namespace path '{{ desired_project.namespace }}'
    fail:
      msg: No exact match found for namespace '{{ desired_project.namespace }}'
    when: namespace_matches | selectattr('path', 'eq', desired_project.namespace) | list | length == 0

  - name: Set namespace fact to exact match namespace
    set_fact:
      namespace: "{{ namespace_matches | selectattr('path', 'eq', desired_project.namespace) | first }}"

- when: namespace_matches | length == 1
  block:
  - name: Set namespace fact to only search result
    set_fact:
      namespace: "{{ namespace_matches | first }}"

# TODO: This needs to be moved to an ensure-group.yml file
- name: Ensure {{ namespace.name }} group attributes
  when: namespace.kind is defined and namespace.kind == 'group'
  uri:
    url: "{{ api_base_url }}/groups/{{ namespace.id }}"
    method: PUT
    headers:
      "{{ common_admin_headers }}"
    body: >-
      visibility={{ group_defaults.visibility }}
    status_code: [200, 201]

- name: Set fact is_new_namespace
  set_fact:
    is_new_namespace: "{{ namespace_matches | length == 0 }}"

- name: Set path_with_namespace fact to '{{ desired_project.namespace }}/{{ desired_project.name }}'
  set_fact:
    path_with_namespace: "{{ desired_project.namespace }}/{{ desired_project.name }}"

- when: not is_new_namespace
  block:
  - name: Check if project '{{ path_with_namespace }}' exists
    uri:
      url: "{{ api_base_url }}/projects?search={{ path_with_namespace }}&search_namespaces=true&simple=false"
      headers:
        "{{ common_admin_headers }}"
      status_code: [200]
    register: check_project

  - name: Set project_matches fact
    set_fact:
      project_matches: "{{ check_project.json | selectattr('path_with_namespace', 'eq', path_with_namespace) | list }}"

  - name: Set project_found fact
    set_fact:
      project_found: "{{ project_matches | length == 1 }}"

  - name: Set project fact
    when: project_found
    set_fact:
      project: "{{ project_matches | first }}"

- when: is_new_namespace or not project_found
  block:
  - name: Set create_body fact
    set_fact:
      create_body: >-
        name={{ desired_project.name }}&
        namespace_id={{ namespace.id }}&
        import_url={{ desired_project.import_url | default(project_defaults.import_url) }}

  - name: Create project '{{ path_with_namespace }}'
    uri:
      url: "{{ api_base_url }}/projects"
      method: POST
      headers:
        "{{ common_admin_headers }}"
      body: "{{ create_body }}"
      status_code: [200, 201]
    register: create_project
    changed_when: true

  - name: Set project fact to newly created project '{{ path_with_namespace }}'
    set_fact:
      project: "{{ create_project.json }}"

- name: Set is_new_project fact
  set_fact:
    is_new_project: "{{ create_project is defined }}"

- debug:
    var: project
    verbosity: 3

- name: Set ensure_project_attributes_body fact
  set_fact:
    # project_defaults are defined in configurator/group_vars/all/vars.yml
    ensure_project_attributes_body: >-
      auto_cancel_pending_pipelines={{ desired_project.auto_cancel_pending_pipelines | default(project_defaults.auto_cancel_pending_pipelines) }}&
      auto_devops_enabled={{ desired_project.auto_devops_enabled | default(project_defaults.auto_devops_enabled) }}&
      builds_access_level={{ desired_project.builds_access_level | default(project_defaults.builds_access_level) }}&
      ci_config_path={{ desired_project.ci_config_path | default(project_defaults.ci_config_path) }}&
      container_registry_enabled={{ desired_project.container_registry_enabled | default(project_defaults.container_registry_enabled) }}&
      forking_access_level={{ desired_project.forking_access_level | default(project_defaults.forking_access_level) }}&
      issues_access_level={{ desired_project.issues_access_level | default(project_defaults.issues_access_level) }}&
      merge_requests_access_level={{ desired_project.merge_requests_access_level | default(project_defaults.merge_requests_access_level) }}&
      only_allow_merge_if_pipeline_succeeds={{ desired_project.only_allow_merge_if_pipeline_succeeds | default(project_defaults.only_allow_merge_if_pipeline_succeeds) }}&
      packages_enabled={{ desired_project.packages_enabled | default(project_defaults.packages_enabled) }}&
      pages_access_level={{ desired_project.pages_access_level | default(project_defaults.pages_access_level) }}&
      repository_access_level={{ desired_project.repository_access_level | default(project_defaults.repository_access_level) }}&
      snippets_access_level={{ desired_project.snippets_access_level | default(project_defaults.snippets_access_level) }}&
      wiki_access_level={{ desired_project.wiki_access_level | default(project_defaults.wiki_access_level) }}&
      visibility={{ desired_project.visibility | default(project_defaults.visibility) }}

- name: Ensure '{{ path_with_namespace }}' attributes
  uri:
    url: "{{ api_base_url }}/projects/{{ project.id }}"
    method: PUT
    headers:
      "{{ common_admin_headers }}"
    body: "{{ ensure_project_attributes_body }}"
    status_code: [200, 201]

- include: ensure-member.yml
  with_items: "{{ desired_project.members | default(project_defaults.members) }}"
  loop_control:
    loop_var: desired_member
